/// Recursively searches through nested maps to retrieve a value
///
/// @param {List} $list [()]
/// Any sass list object.
///
/// @param {Number} $index [null]
/// The index of the desired removal. Can be negative to remove from rear.
///
/// @return {List}
///

@function remove-nth(
  $list: (),
  $index: null
) {
  
  $error: number-error($index);
  $error: nth-zero-error($index);
  $error: list-error($list, $index);

  $result: ();
  $index: if($index < 0, length($list) + $index + 1, $index);

  @for $i from 1 through length($list) {
    @if $i != $index {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

/// Incrementally searches through nested maps to retrieve a value
///
/// @param {Map} $map [null]
/// Any sass map object.
///
/// @param {List} $keys []
/// A list of the map keys from least to most specific.
///

@function map-nested-get(
  $map: null,
  $keys...
) {

  // TODO: figure out why $error: map-error($map); is invalid
  @if type-of($map) != map { $error: map-error($map); }

  $key-count: length($keys);
  $ret: map-get($map, nth($keys, 1));

  @while $key-count > 1 {
    $keys: remove-nth($keys, 1);
    $key-count: length($keys);

    @if $ret == null {
      @error "incorrect ordering of keys for nested-get";
    }

    $ret: map-get($ret, nth($keys, 1));
  }

  @return $ret;
}

/// Adds a value to the beginning of a sass list
///
/// @param {Map} $list [null]
/// A sass list
///
/// @param {List} $value []
/// A value to be added to the front of the list
///
/// @return {list}
///

@function prepend(
  $list: null,
  $value: null
) {
  @return join($value, $list);
}
