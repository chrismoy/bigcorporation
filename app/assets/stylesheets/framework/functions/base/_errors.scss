/// Checks a variable for data type 'bool'
///
/// @param {Bool} $bool [null]
/// Any sass bool
///
/// @return {String}
///

@function bool-error(
  $bool: null
) {
  @if type-of($bool) != bool {
    @error "Invalid type, expected bool for #{type-of($bool)}";
  } @else {
    @return true;
  }
}

/// Checks a variable for data type 'color'
///
/// @param {Color} $color [null]
/// Any sass color
///
/// @return {String}
///

@function color-error(
  $color: null
) {
  @if type-of($color) != color {
    @error "Invalid type, expected color for #{type-of($color)}";
  } @else {
    @return true;
  }
}

/// Checks a variable for data type 'list'
///
/// @param {List} $list [null]
/// Any sass list
///
/// @param {Number} $index [0]
/// An index intended for use in an nth-function to access an element of $list
///
/// @return {String}
///

@function list-error(
  $list: null,
  $index: 0
) {
  $length: length($list);

  @if $length < 1 {
    @error "Invalid list, no elements included";
  } @else if abs($index) > $length {
    @error "Index invalid. Index #{$index} for list length #{$length}";
  } @else {
    @return true;
  }
}

/// Checks a variable for data type 'map'
///
/// @param {Map} $map [null]
/// Any sass map
///
/// @return {String}
///

@function map-error(
  $map: null
) {
  @if type-of($map) != map {
    @error "Invalid type, expected map for #{type-of($map)}";
  } @else {
    @return true;
  }
}

/// Checks an index for non-zero value
///
/// @param {Number} $index [null]
/// A number representing the index used for nth-based list functions
///
/// @return {String}
///

@function nth-zero-error(
  $index: null
) {
  @if $index == 0 {
    @error "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else {
    @return true;
  }
}

/// Checks for presence of a variable
///
/// @param {List} $range [null]
/// Any sass range
///
/// @return {String}
///

@function presence-error(
  $var: null
) {
  @if $var == null {
    @error "Empty variable, received null";
  } @else {
    @return true;
  }
}

/// Checks a range for correct length
///
/// @param {List} $range [null]
/// Any sass range
///
/// @return {String}
///

@function range-error(
  $range: null
) {
  @if length($range) != 2 {
    @error "Invalid range, expected length 2 for #{length($range)}";
  } @else {
    @return true;
  }
}

/// Checks a variable for data type 'string'
///
/// @param {String} $string [null]
/// Any sass string
///
/// @return {String}
///

@function string-error(
  $string: null
) {
  @if type-of($string) != string {
    @error "Invalid type, expected string for #{type-of($string)}";
  } @else {
    @return true;
  }
}
