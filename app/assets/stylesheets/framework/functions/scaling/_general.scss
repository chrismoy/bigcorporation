/// Returns the value for a number scaled to the desired viewport size
///
/// @param {Number} $value [null]
/// The SASS number to be scaled
///
/// @param {String} $modifier [null]
/// Name of the modifier to be used. Example: sm, md, lg
///
/// @return {Number}
///

@function scale-responsive(
  $value: null,
  $modifier: null
) {

  $error: number-error($value);
  $error: string-error($modifier);

  $scaler: map-get($scale-responsive, $modifier);

  $ret: $scaler * $value;

  @return $ret;
}

/// Returns the value for font-size scaled to the desired viewport size
///
/// @param {Number} $font-size [null]
/// The font-size of the element to be scaled
///
/// @param {String} $modifier [null]
/// Name of the modifier to be used. Example: sm, md, lg
///
/// @return {Number}
///

@function scale-font(
  $font-size: null,
  $modifier: null
) {

  $error: number-error($font-size);
  $error: string-error($modifier);

  @return scale-responsive($font-size, $modifier);
}

/// Returns a value scaled down by the scale factor
///
/// @param {Number} $value [null]
/// The number that is to be divided by the scale factor
///
/// @param {Number} $order [1]
/// The number of times the argument should be divided by the scale factor.
/// Example: $order: 2 would yield arg / sf / sf
///
/// @return {Number}
///

@function scale-inverse-sf(
  $value: null,
  $order: 1
) {

  $error: number-error($value);

  $ret: $value;

  @for $i from 1 through $order {
    $ret: $ret / $scale-factor;
  }

  @return $ret;
}

/// Returns the value for the height of the navbar scaled to the desired viewport size
///
/// @param {Number} $height [null]
/// The base-height of the navbar
///
/// @param {String} $modifier [null]
/// Name of the modifier to be used. Example: sm, md, lg
///
/// @return {Number}
///

@function scale-navbar(
  $height: null,
  $modifier: null
) {

  $error: number-error($height);
  $error: string-error($modifier);

  @return scale-responsive($height, $modifier);
}

/// Returns the a value scaled up by the scale factor
///
/// @param {Number} $value [null]
/// The number that is to be multiplied by the scale factor
///
/// @param {Number} $order [1]
/// The number of times the argument should be multiplied by the scale factor.
/// Example: $order: 3 would yield arg * sf * sf * sf
///
/// @return {Number}
///

@function scale-sf(
  $value: null,
  $order: 1
) {

  $error: number-error($value);

  $ret: $value;

  @for $i from 1 through $order {
    $ret: $ret * $scale-factor;
  }

  @return $ret;
}

/// Returns the CSS values for spacing scaled to the desired viewport size
///
/// @param {Number} $spacing [null]
/// Map of the element to be sized. Example: $btn, $navbar
///
/// @param {String} $modifier [null]
/// Name of the modifier to be used. Example: sm, md, lg
///
/// @param {Number} $ratio [null]
/// Ratio of horizontal to vertical spacing. Example: 2 would produce horizontal
/// spacing twice the width of the vertical spacing, and .333 would produce
/// horizontal spacing 1/3 the width of the vertical spacing. Vertical spacing
/// is always the base value (the ratio will always be 1:xxx vert:horiz)
///
/// @return {Number}
///

@function scale-spacing(
  $spacing: null,
  $modifier: null,
  $ratio: 1
) {

  $error: number-error($spacing);
  $error: string-error($modifier);

  $scaled-spacing: scale-responsive($spacing, $modifier);

  $ret: $scaled-spacing $ratio * $scaled-spacing;

  @return $ret;
}
