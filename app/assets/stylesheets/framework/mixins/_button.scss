/// Returns the base sizing attributes for a button
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin btnBase(
) {
  background-color: transparent;
  border: $btn-border;
  @include rem(border-radius, $base-radius);
  box-sizing: border-box;
  font-family: $font-family-primary;
  line-height: $font-line-height-base;
  outline: $btn-outline;
  position: relative;
  @include transition(all);

  &:hover {
    cursor: $btn-cursor;
  }
}

/// Returns the responsive sizing attributes for a button
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin btnResponsive(
  $modifier: null
) {

  $error: string-error($modifier);

  $font-size: scale-font($btn-font-size, $modifier);
  $dimension: scale-sf($font-size);
  $btn-padding: 0.5 * ($dimension - $font-size);

  @include rem(font-size, $font-size);
  @include rem(padding, scale-spacing($btn-padding, $modifier));

  &-noText { @include rem(height, $dimension); }

  &-large {
    $font-size: scale-font($btn-font-size-lg, $modifier);
    $dimension: scale-sf($font-size);
    $btn-padding: 0.5 * ($dimension - $font-size);

    @include rem(font-size, $font-size);
    @include rem(padding, scale-spacing($btn-padding, $modifier));
  }

  &-square {
    @include rem(width, $dimension);
  }
}

/// Returns the viewport-dependent sizing attributes for a hamburger button
/// Adapted from Joren Vanhee's sass-burger
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin btn-hamburger(
  $width: 100%
) {

  $bar-height: $btn-hamburger-bar-height;
  $color: $btn-hamburger-color;
  $gutter: $btn-hamburger-bar-spacing;
  $prompt-size: $btn-hamburger-prompt-size;

  margin-bottom: $bar-height + $gutter;
  margin-top: $bar-height + $gutter;
  position: relative;

  & {
    padding: 0;
  }

  &, &::before, &::after {
    background-color: $color;
    border-radius: $base-radius;
    display: block;
    width: $width;
    height: $bar-height;
    transition-property: background-color, transform;
    transition-duration: $transition-time;
  }

  &::before, &::after {
    position: absolute;
    content: "";
  }

  &::before {
    top: -($bar-height + $gutter);
  }

  &::after {
    top: $bar-height + $gutter;
  }

  // TODO, set prompt variables

  &_prompt {
    @include rem(font-size, 2rem);
    @include rem(margin-top, -0.5 * 2rem);
  }
}

// Burger animations
@mixin btn-hamburger-active(
  $color: auto
) {

  $bar-height: $btn-hamburger-bar-height;
  $gutter: $btn-hamburger-bar-spacing;

  & {
    background-color: transparent;
  }
  @if ($color != auto) {
    &::before, &::after {
      background-color: $color;
    }
  }
  &::before {
    transform: translateY($gutter + $bar-height) rotate(45deg);
  }
  &::after {
    transform: translateY(-($gutter + $bar-height)) rotate(-45deg);
  }
}


// Select parts of the burger
@mixin burger-parts {
  &, &::before, &::after {
    @content;
  }
}

@mixin burger-top {
  &::before {
    @content;
  }
}

@mixin burger-middle {
  & {
    @content;
  }
}

@mixin burger-bottom {
  &::after {
    @content;
  }
}

@mixin btnTheme(
  $key: null
) {

  @if type-of($key) != string {
    @error type-of($key);
  }

  $error: string-error($key);

  background-color: map-get($btn-bg-colors, $key);
  color: map-get($btn-font-colors, $key);
  border: map-get($btn-border-colors, $key);
  box-shadow: map-get($btn-box-shadows, $key);
}
