/// Returns the base sizing attributes for a button
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin btn-base(
  $modifier: null
) {

  $error: string-error($modifier);

  $font-size: scale-font($btn-font-size, $modifier);
  $dimension: scale-sf($font-size);
  $btn-padding: 0.5 * ($dimension - $font-size);

  @include rem(border-radius, $base-radius);
  @include rem(font-size, $font-size);
  @include rem(padding, scale-spacing($btn-padding, $modifier));

  &-noText { @include rem(height, $dimension); }

  &-large {
    $font-size: scale-font($btn-font-size-lg, $modifier);
    $dimension: scale-sf($font-size);
    $btn-padding: 0.5 * ($dimension - $font-size);

    @include rem(font-size, $font-size);
    @include rem(padding, scale-spacing($btn-padding, $modifier));
  }

  &-square { @include rem(width, $dimension); }
}

/// Returns the viewport-dependent sizing attributes for a hamburger button
/// Adapted from Joren Vanhee's sass-burger
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
  $burger-height: $height !global;
  $burger-gutter: $gutter !global;

  position: relative;
  margin-top: $height + $gutter;
  margin-bottom: $height + $gutter;

  & {
    padding: 0;
  }

  &, &::before, &::after {
    display: block;
    width: $width;
    height: $height;
    background-color: $color;

    @if $border-radius != 0 {
      border-radius: $border-radius;
    }

    transition-property: background-color, transform;
    transition-duration: $transition-duration;
  }

  &::before, &::after {
    position: absolute;
    content: "";
  }

  &::before {
    top: -($height + $gutter);
  }

  &::after {
    top: $height + $gutter;
  }

  // TODO, set prompt variables

  &_prompt {
    @include rem(font-size, 2rem);
    @include rem(margin-top, -0.5 * 2rem);
  }
}

// Burger animations
@mixin burger-to-cross($color: auto) {
  & {
    background-color: transparent;
  }
  @if ($color != auto) {
    &::before, &::after {
      background-color: $color;
    }
  }
  &::before {
    transform: translateY($burger-gutter + $burger-height) rotate(45deg);
  }
  &::after {
    transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
  }
}


// Select parts of the burger
@mixin burger-parts {
  &, &::before, &::after {
    @content;
  }
}

@mixin burger-top {
  &::before {
    @content;
  }
}

@mixin burger-middle {
  & {
    @content;
  }
}

@mixin burger-bottom {
  &::after {
    @content;
  }
}
