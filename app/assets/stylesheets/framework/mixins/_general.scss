/// Returns a CSS setting that includes a backup value for REMs in pixels if applicable
///
/// @param {String} $property [null]
/// CSS Property to be changed. Example inputs "font-size", "width", "margin"
///
/// @param {List} $values [null]
/// A list of values to be updated. Can be single or plural. Ex: 10px 20px is valid for work with padding or the like
///

@mixin rem(
  $property: null,
  $values: null
) {

  @if type-of($property) != "string" { @error string-error($property); }

  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or type-of($value) != "number" {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + 0rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + 0px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}
