/// Returns a CSS setting that includes a backup value for REMs in pixels if applicable
///
/// @param {String} $property [null]
/// CSS Property to be changed. Example: "font-size", "width", "margin"
///
/// @param {List} $values [null]
/// A list of values to be updated. Can be single or plural. Ex: 10px 20px is valid for work with padding or the like
///

@mixin rem(
  $property: null,
  $values: null
) {

  $error: string-error($property);
  $error: list-error($values);

  $px : ();
  $rem: ();

  @each $value in $values {

    @if type-of($value) != number or $value == 0 or unit($value) == '%' {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);
      $conversion-factor: 16 * $rem-scaler;

      @if $unit == px {
        $px : append($px,  $value);
        $rem: append($rem, ($val / $conversion-factor + 0rem));
      }

      @if $unit == rem {
        $px : append($px,  ($val * $conversion-factor + 0px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

/// Returns settings to a specified value for a property for the various screen sizers as specified in
/// $screen-sizes in settings.scss
///
/// @param {String} $property [null]
/// A property to be set
///
/// @param {String/Number} $value [null]
/// The value of the property to be set
///
/// @param {Bool} $append [false]
/// Whether to append to an existing block modifier or to be an independent block modifier
///

@mixin andUp(
  $property: null,
  $value: null,
  $append: false
) {

  $error: string-error($property);

  @each $size in $screen-sizes {

    $viewport: nth($size, 1);
    $modifier: nth($size, 2);

    @if $append {
      &#{capitalize($modifier)}Up {
        @media #{$viewport} {
          @include rem($property, $value);
        }
      }
    } @else {
      &-#{$modifier}Up {
        @media #{$viewport} {
          @include rem($property, $value);
        }
      }
    }
  }
}

/// Returns settings to a specified value for a property for the various screen sizers as specified in
/// $screen-sizes-inverse in settings.scss
///
/// @param {String} $property [null]
/// A property to be set
///
/// @param {String/Number} $value [null]
/// The value of the property to be set
///
/// @param {Bool} $append [false]
/// Whether to append to an existing block modifier or to be an independent block modifier
///

@mixin andDown(
  $property: null,
  $value: null,
  $append: false
) {

  $error: string-error($property);

  @each $size in $screen-sizes-inverse {

    $viewport: nth($size, 1);
    $modifier: nth($size, 2);

    @if $append {
      &#{capitalize($modifier)}Up {
        @media #{$viewport} {
          @include rem($property, $value);
        }
      }
    } @else {
      &-#{$modifier}Up {
        @media #{$viewport} {
          @include rem($property, $value);
        }
      }
    }
  }
}
