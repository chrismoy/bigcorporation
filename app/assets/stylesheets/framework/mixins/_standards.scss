/// Returns a set of classes to set the correct window area based on navbar position
///
/// @param {String} $viewport [null]
/// The viewport definition for the desired screen size ('only screen and (max-width: 641px)')
///
/// @param {String} $modifier [null]
/// $size: The name for the size modifier of the column classes (sm, md, lg, xl, etc)
///

@mixin clearNav(
  $modifier: null
) {
  
  $error: string-error($modifier);

  $navbar-height: scale-navbar(scale-sf($navbar-font-size, 2), $modifier);
  $navbar-width: scale-navbar($navbar-width-vertical, $modifier);

  &-clear {
    &Bottom#{capitalize($modifier)} {
      @include rem(padding-bottom, $navbar-height);
      height: 100%;
    }
    &Left#{capitalize($modifier)} {
      @include rem(padding-left, $navbar-width);
      width: 100%;
    }
    &Right#{capitalize($modifier)} {
      @include rem(padding-right, $navbar-width);
      width: 100%;
    }
    &Top#{capitalize($modifier)} {
      @include rem(padding-top, $navbar-height);
      height: 100%;
    }
  }
}

/// Returns a standardized set of background color classes for a given parent class
///

@mixin stdBg (
) {

  &-bgTransparent {
    background-color: transparent;
  }

  &-bgPrimary {
    background-color: $color-primary;
  }

  &-bgSecondary {
    background-color: $color-secondary;
  }

  &-bgTertiary {
    background-color: $color-tertiary;
  }

  &-colorBlack {
    color: $black;
  }

  &-colorWhite {
    color: $white;
  }
}

/// Returns a standardized set of border classes for a given parent class
///
/// @param {Number} $border-width [$base-border-width]
/// A number representing the desired width of the borders
///

@mixin stdBorder(
  $border-width: $base-border-width
) {
  &-borderTransparent {
    border: $border-width solid transparent;
  }

  &-borderPrimary {
    border: $border-width solid $color-primary;
  }

  &-borderSecondary {
    border: $border-width solid $color-secondary;
  }

  &-borderTertiary {
    border: $border-width solid $color-tertiary;
  }

  &-borderBlack {
    border: $border-width solid $black;
  }

  &-borderWhite {
    border: $border-width solid $white;
  }
}

/// Returns a standardized set of color classes for a given parent class
///

@mixin stdColor(
) {
  &-colorTransparent {
    color: transparent;
  }

  &-colorPrimary {
    color: $color-primary;
  }

  &-colorSecondary {
    color: $color-secondary;
  }

  &-colorTertiary {
    color: $color-tertiary;
  }

  &-colorBlack {
    color: $black;
  }

  &-colorWhite {
    color: $white;
  }
}

/// Returns a standardized set of color classes for a given parent class
///

@mixin stdFloat(
) {
  &-left {
    float: left;
  }

  &-right {
    float: right;
  }
}

/// Returns a standardized set of color classes for a given parent class
///

@mixin stdPosition(
  $fixed: false
) {

  $position: nil;

  @if $fixed {
    $position: fixed;
  } @else {
    $position: absolute;
  }

  &-top {
    
    &Left {
      left: 0;
      position: $position;
      top: 0;
    }

    &Right {
      right: 0;
      position: $position;
      top: 0;
    }
  }

  &-bottom {
    
    &Left {
      left: 0;
      position: $position;
      top: 0;
    }

    &Right {
      right: 0;
      position: $position;
      top: 0;
    }
  }
}

/// Returns a standardized set of spacing (margin/padding) classes
///

@mixin stdSpacing(
) {
  &-margin {
    margin: $base-margin;
  }

  &-padding {
    padding: $base-padding;
  }
} 

